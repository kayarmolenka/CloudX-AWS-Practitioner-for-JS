service: product-service

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-1

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource: 'arn:aws:dynamodb:eu-west-1:*:*'
#        - Effect: Allow
#          Action: "sqs:*"
#          Resource:
#            - Fn::GetAtt: [ catalogItemsQueue, Arn ]

  environment:
    ProductsTable: ${env:PRODUCTS_TABLE}
    StocksTable: ${env:STOCKS_TABLE}
    SQS_URL:
      Ref: catalogItemsQueue

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  apiBaseUrl: https://ayoda6b68a.execute-api.eu-west-1.amazonaws.com/dev
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: npm
  serverless-offline:
    httpPort: 3001

  swagger:
    basePath: /dev
    info:
      title: My API
      version: 1.0.0
    host: https://ayoda6b68a.execute-api.eu-west-1.amazonaws.com/dev

resources:
  Resources:
    catalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "catalogItemsQueue"

    products:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    stocks:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  getProductsList:
    handler: src/handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true

  getProductsById:
    handler: src/handler.getProductsById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true

  createProduct:
    handler: src/handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true

  catalogBatchProcess:
    handler: src/handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn